{"ast":null,"code":"var _jsxFileName = \"/Users/hazukimiyake/Documents/matcha/src/Test/index.js\";\nimport React, { Component } from 'react';\nimport { withCookies } from 'react-cookie';\n\nconst {\n  AccountClient\n} = require('../matcha_grpc_web_pb');\n\nconst {\n  imageData\n} = require('../matcha_pb'); // const { imageRequest } = require('../matcha_pb');\n\n\nclass Test extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getImages = () => {\n      return new Promise((resolve, reject) => {\n        const client = new AccountClient('http://10.43.1.110:8080');\n        const request = new imageData();\n        client.imageTest(request, {}, (err, reply) => {\n          if (err) {\n            console.log(err.code);\n            console.log(err.message);\n          } else {\n            const data = reply.getImage_asB64();\n            console.log(`data is`);\n            resolve(data);\n          }\n        });\n      });\n    };\n\n    this.allSet = async () => {\n      try {\n        const data = await this.getImages();\n        this.setState({\n          data\n        });\n      } catch (error) {\n        console.log(error.response);\n      }\n    };\n\n    this.state = {\n      data: ''\n    };\n  } // getImages = () => {\n  // \treturn new Promise((resolve, reject) => {\n  // \t\tconst client = new AccountClient('http://10.43.1.110:8080');\n  // \t\tconst request = new imageRequest();\n  // \t\tconst uid = this.props.cookies.get('uid');\n  // \t\tconst temp = this.props.cookies.get('session_id');\n  // \t\tconst metaData = {\n  // \t\t\t'user_id': uid,\n  // \t\t\t'session_id': temp\n  // \t\t}\n  // \t\t// const uid = this.props.cookies.get('uid');\n  // \t\trequest.setUserid(3);\n  // \t\trequest.setCount(2);\n  // \t\tconst stream = client.getImages(request, metaData);\n  // \t\tstream.on('data', function(response) {\n  // \t\t\tconsole.log(`ever?`)\n  // \t\t\tconsole.log(`a: ${response.getImage_asB64()}`);\n  // \t\t\tconst d = response.getImage_asB64();\n  // \t\t\tresolve(d);\n  // \t\t});\n  // \t\tstream.on('error', function(err) {\n  // \t\t\tconsole.log(`error: ${err}`);\n  // \t\t});\n  // \t})\n  // }\n\n\n  UNSAFE_componentWillMount() {\n    this.allSet();\n  }\n\n  render() {\n    const image = this.state.data;\n    console.log(image);\n\n    const Example = ({\n      data\n    }) => React.createElement(\"img\", {\n      src: `data:image/jpeg;base64,${data}`,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    });\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Example, {\n      data: image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"test page\"));\n  }\n\n}\n\nexport default withCookies(Test);","map":{"version":3,"sources":["/Users/hazukimiyake/Documents/matcha/src/Test/index.js"],"names":["React","Component","withCookies","AccountClient","require","imageData","Test","constructor","props","getImages","Promise","resolve","reject","client","request","imageTest","err","reply","console","log","code","message","data","getImage_asB64","allSet","setState","error","response","state","UNSAFE_componentWillMount","render","image","Example"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,cAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAoBC,OAAO,CAAC,uBAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,cAAD,CAA7B,C,CACA;;;AAEA,MAAME,IAAN,SAAmBL,SAAnB,CAA6B;AAC5BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAiCnBC,SAjCmB,GAiCP,MAAM;AACjB,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,cAAMC,MAAM,GAAG,IAAIV,aAAJ,CAAkB,yBAAlB,CAAf;AACA,cAAMW,OAAO,GAAG,IAAIT,SAAJ,EAAhB;AACAQ,QAAAA,MAAM,CAACE,SAAP,CAAiBD,OAAjB,EAA0B,EAA1B,EAA8B,CAACE,GAAD,EAAMC,KAAN,KAAgB;AAC7C,cAAID,GAAJ,EAAS;AACRE,YAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACK,OAAhB;AACA,WAHD,MAGO;AACN,kBAAMC,IAAI,GAAGL,KAAK,CAACM,cAAN,EAAb;AACAL,YAAAA,OAAO,CAACC,GAAR,CAAa,SAAb;AACAR,YAAAA,OAAO,CAACW,IAAD,CAAP;AACA;AACD,SATD;AAUA,OAbM,CAAP;AAcA,KAhDkB;;AAAA,SAkDnBE,MAlDmB,GAkDV,YAAY;AACpB,UAAI;AACH,cAAMF,IAAI,GAAG,MAAM,KAAKb,SAAL,EAAnB;AACA,aAAKgB,QAAL,CAAc;AAACH,UAAAA;AAAD,SAAd;AACA,OAHD,CAGE,OAAMI,KAAN,EAAa;AACdR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAACC,QAAlB;AACA;AACD,KAzDkB;;AAElB,SAAKC,KAAL,GAAa;AACZN,MAAAA,IAAI,EAAE;AADM,KAAb;AAGA,GAN2B,CAQ5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA4BAO,EAAAA,yBAAyB,GAAG;AAC3B,SAAKL,MAAL;AACA;;AAEDM,EAAAA,MAAM,GAAG;AACR,UAAMC,KAAK,GAAG,KAAKH,KAAL,CAAWN,IAAzB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;;AACA,UAAMC,OAAO,GAAI,CAAC;AAAEV,MAAAA;AAAF,KAAD,KAAc;AAAK,MAAA,GAAG,EAAG,0BAAyBA,IAAK,EAAzC;AAA4C,MAAA,GAAG,EAAC,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B;;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAES,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFD,CADD;AAMA;;AA1E2B;;AA6E7B,eAAe7B,WAAW,CAACI,IAAD,CAA1B","sourcesContent":["import React, { Component } from 'react';\nimport { withCookies } from 'react-cookie';\nconst { AccountClient } = require('../matcha_grpc_web_pb');\nconst { imageData } = require('../matcha_pb');\n// const { imageRequest } = require('../matcha_pb');\n\nclass Test extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: ''\n\t\t}\n\t}\n\t\n\t// getImages = () => {\n\t// \treturn new Promise((resolve, reject) => {\n\t// \t\tconst client = new AccountClient('http://10.43.1.110:8080');\n\t// \t\tconst request = new imageRequest();\n\t// \t\tconst uid = this.props.cookies.get('uid');\n\t// \t\tconst temp = this.props.cookies.get('session_id');\n\t// \t\tconst metaData = {\n\t// \t\t\t'user_id': uid,\n\t// \t\t\t'session_id': temp\n\t// \t\t}\n\t// \t\t// const uid = this.props.cookies.get('uid');\n\t// \t\trequest.setUserid(3);\n\t// \t\trequest.setCount(2);\n\t// \t\tconst stream = client.getImages(request, metaData);\n\t// \t\tstream.on('data', function(response) {\n\t// \t\t\tconsole.log(`ever?`)\n\t// \t\t\tconsole.log(`a: ${response.getImage_asB64()}`);\n\t// \t\t\tconst d = response.getImage_asB64();\n\t// \t\t\tresolve(d);\n\t// \t\t});\n\t// \t\tstream.on('error', function(err) {\n\t// \t\t\tconsole.log(`error: ${err}`);\n\t// \t\t});\n\t// \t})\n\t// }\n\t\n\tgetImages = () => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst client = new AccountClient('http://10.43.1.110:8080');\n\t\t\tconst request = new imageData();\n\t\t\tclient.imageTest(request, {}, (err, reply) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(err.code);\n\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t} else {\n\t\t\t\t\tconst data = reply.getImage_asB64();\n\t\t\t\t\tconsole.log(`data is`);\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\t\n\tallSet = async () => {\n\t\ttry {\n\t\t\tconst data = await this.getImages();\n\t\t\tthis.setState({data});\n\t\t} catch(error) {\n\t\t\tconsole.log(error.response);\n\t\t}\n\t}\n\t\n\tUNSAFE_componentWillMount() {\n\t\tthis.allSet();\n\t}\n\t\t\n\trender() {\n\t\tconst image = this.state.data;\n\t\tconsole.log(image);\n\t\tconst Example =  ({ data }) => <img src={`data:image/jpeg;base64,${data}`} alt='' />\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Example data={image} />\n\t\t\t\t<div>test page</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withCookies(Test);"]},"metadata":{},"sourceType":"module"}