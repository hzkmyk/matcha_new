{"ast":null,"code":"var _jsxFileName = \"/Users/hazukimiyake/Documents/matcha/src/InitialProfile/Photos/index.js\";\nimport React, { Component } from 'react';\nimport { withCookies } from 'react-cookie';\nimport Dropzone from 'react-dropzone';\nimport './index.css';\n\nconst {\n  imageData\n} = require('../../matcha_pb');\n\nclass InitialPhoto extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onDrop = async acceptedFile => {\n      const file = acceptedFile.find(f => f);\n      let joined = this.state.names.concat(file.name);\n      this.setState({\n        names: joined\n      }); // newimage makes <img src=\"\">\n\n      let promise = new Promise((resolve, reject) => {\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n\n        reader.onload = () => {\n          resolve(reader.result);\n        };\n      });\n      const result = await promise;\n      const arr = result.split(\",\");\n      joined = this.state.images.concat(arr[1]);\n      this.setState({\n        images: joined\n      });\n      console.log(\"names are \", this.state.names);\n      console.log(\"images are \", this.state.images);\n    };\n\n    this.uploadPhotos = () => {\n      const request = new imageData();\n      request.setImage('');\n      request.setIndex(2);\n      const uid = this.props.cookies.get('uid');\n      const temp = this.props.cookies.get('session_id');\n      const metadata = {\n        'user_id': uid,\n        'session_id': temp\n      };\n      console.log('aa');\n      client.updateImage(request, metadata, (err, reply) => {\n        if (err) {\n          console.log(err.code);\n          console.log(err.message);\n        } else {// console.log(reply.getMessage());\n        }\n      });\n    };\n\n    this.state = {\n      names: [],\n      images: []\n    };\n  }\n\n  render() {\n    const maxSize = 5242880;\n    return React.createElement(\"div\", {\n      className: \"text-center mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onDrop: this.onDrop,\n      accept: \"image/png, image/jpeg, image/jpg\",\n      minSize: 0,\n      maxSize: maxSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, ({\n      getRootProps,\n      getInputProps,\n      isDragActive,\n      isDragReject,\n      rejectedFiles\n    }) => {\n      const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n      return React.createElement(\"div\", Object.assign({}, getRootProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })), !isDragActive && 'Click here or drop a file to upload!', isDragActive && !isDragReject && \"Drop it like it's hot!\", isDragReject && \"File type not accepted, sorry!\", isFileTooLarge && React.createElement(\"div\", {\n        className: \"text-danger mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"File is too large.\"));\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.names.map((value, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, value);\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.uploadPhotos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Start Exploring\"));\n  }\n\n}\n\nexport default withCookies(InitialPhoto);","map":{"version":3,"sources":["/Users/hazukimiyake/Documents/matcha/src/InitialProfile/Photos/index.js"],"names":["React","Component","withCookies","Dropzone","imageData","require","InitialPhoto","constructor","props","onDrop","acceptedFile","file","find","f","joined","state","names","concat","name","setState","promise","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","arr","split","images","console","log","uploadPhotos","request","setImage","setIndex","uid","cookies","get","temp","metadata","client","updateImage","err","reply","code","message","render","maxSize","getRootProps","getInputProps","isDragActive","isDragReject","rejectedFiles","isFileTooLarge","length","size","map","value","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withCookies } from 'react-cookie';\nimport Dropzone from 'react-dropzone';\nimport './index.css';\nconst { imageData } = require('../../matcha_pb');\n\nclass InitialPhoto extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnames: [],\n\t\t\timages: []\n\t\t}\n\t}\n\n\tonDrop = async (acceptedFile) => {\n\t\tconst file = acceptedFile.find(f => f)\n\t\tlet joined = this.state.names.concat(file.name);\n\t\tthis.setState({ names: joined });\n\t\t// newimage makes <img src=\"\">\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tlet reader = new FileReader()\n\t\t\treader.readAsDataURL(file)\n\t\t\treader.onload = () => {\n\t\t\t\tresolve(reader.result);\n\t\t\t}\n\t\t})\n\t\tconst result = await promise;\n\t\tconst arr = result.split(\",\");\n\t\tjoined = this.state.images.concat(arr[1]);\n\t\tthis.setState({ images: joined });\n\t\tconsole.log(\"names are \", this.state.names);\n\t\tconsole.log(\"images are \", this.state.images);\n\t}\n\n\tuploadPhotos = () => {\n\t\tconst request = new imageData();\n\t\trequest.setImage('');\n\t\trequest.setIndex(2);\n\t\tconst uid = this.props.cookies.get('uid');\n\t\tconst temp = this.props.cookies.get('session_id');\n\t\tconst metadata = {\n\t\t\t'user_id': uid,\n\t\t\t'session_id': temp\n\t\t}\n\t\tconsole.log('aa');\n\t\tclient.updateImage(request, metadata, (err, reply) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(err.code);\n\t\t\t\tconsole.log(err.message);\n\t\t\t} else {\n\t\t\t\t// console.log(reply.getMessage());\n\t\t\t}\n\t\t})\n\t}\n\n\trender() {\n\t\tconst maxSize = 5242880;\n\t\treturn (\n\t\t\t<div className=\"text-center mt-5\">\n\t\t\t\t<Dropzone\n\t\t\t\t\tonDrop={this.onDrop}\n\t\t\t\t\taccept=\"image/png, image/jpeg, image/jpg\"\n\t\t\t\t\tminSize={0}\n\t\t\t\t\tmaxSize={maxSize}\n\t\t\t\t>\n\t\t\t\t\t{({getRootProps, getInputProps, isDragActive, isDragReject, rejectedFiles}) => {\n\t\t\t\t\t\tconst isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div {...getRootProps()}>\n\t\t\t\t\t\t\t\t<input {...getInputProps()} />\n\t\t\t\t\t\t\t\t{!isDragActive && 'Click here or drop a file to upload!'}\n\t\t\t\t\t\t\t\t{isDragActive && !isDragReject && \"Drop it like it's hot!\"}\n\t\t\t\t\t\t\t\t{isDragReject && \"File type not accepted, sorry!\"}\n\t\t\t\t\t\t\t\t{isFileTooLarge && (\n\t\t\t\t\t\t\t\t\t<div className=\"text-danger mt-2\">\n\t\t\t\t\t\t\t\t\t\tFile is too large.\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t}\n\t\t\t\t</Dropzone>\n\t\t\t\t<div>\n\t\t\t\t\t{this.state.names.map((value, i) => {\n\t\t\t\t\t\treturn <div key={i}>{value}</div>\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tonClick={this.uploadPhotos}\n\t\t\t\t>\n\t\t\t\t\tStart Exploring\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withCookies(InitialPhoto);"]},"metadata":{},"sourceType":"module"}